direction(0,10,10). %% fermo
direction(1,20,10). %% sopra
direction(2,0,10).  %% sotto
direction(3,10,20). %% destra
direction(4,10,0).  %% sinitra

%% MAPPA %%
celle(X, Y, I, C) :- read(griglia(griglia(mappa(I,cella(x(X)))))), read(griglia(griglia(mappa(I,cella(y(Y)))))), read(griglia(griglia(mappa(I,cella(val(C)))))).
nodo(I) :- read(griglia(griglia(mappa(I,cella(x(A)))))).

arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2, X2 = X1 + 1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2, X2 = X1 - 1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2 + 1, X2 = X1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2 - 1, X2 = X1, C1 != 2, C2 != 2.   

muro(X, Y, I) :- celle(X, Y, I, C), C = 2.
libero(X, Y, I) :- celle(X, Y, I, C), C = 0.

%% PLAYER %%
player(X, Y, I) :- read(griglia(griglia(mappa(I,cella(x(X)))))), read(griglia(griglia(mappa(I,cella(y(Y)))))), read(griglia(griglia(player(x(X))))), read(griglia(griglia(player(y(Y))))).

%% BOX %%
box(X, Y, I)  :- celle(X, Y, I, C), C = 4.

%% TARGET %%
target(X, Y, I) :- celle(X, Y, I, C), C = 6.

%% Ultima e penultima direzione
penultimaDir(X) :- read(griglia(griglia(direzionePrecedente(X)))).
ultimaDir(X) :- read(griglia(griglia(direzione(X)))).


%% CAMMINO Fase 1 (cerco una scatola) %%
startS(I) :- player(_, _, I), not st.
stopS(I) :- box(_, _, I), not st. %% Va bene perche' per ora la scatola e' una sola. Poi va trovato un modo per selezionarne una (la piu vicina?)

inPath(X,Y) | outPath(X,Y) :- arc(X,Y), not st.
:- inPath(X,Y), inPath(X,Y1), Y != Y1, not st.
:- inPath(X,Y), inPath(X1,Y), X != X1, not st. 
reachedS(X) :- startS(X), not st.
reachedS(X) :- reachedS(Y), inPath(Y,X), not st.
:- stopS(X), not reachedS(X), not st.
:- stopS(X), inPath(X,Y), not st.

scatolaTrovata(D) :- player(_,_,NP), box(_,_,NB), NP=NB-1, D=1.
scatolaTrovata(D) :- player(_,_,NP), box(_,_,NB), NP=NB+1, D=2. 
scatolaTrovata(D) :- player(_,_,NP), box(_,_,NB), NP=NB-9, D=3. 
scatolaTrovata(D) :- player(_,_,NP), box(_,_,NB), NP=NB+9, D=4. 
st :- scatolaTrovata(D).

%% Non mollo piu la scatola
% :- ???

%% CAMMINO Fase 2 (cerco un target) %%
startT(I) :- box(_, _, I), st.
stopT(I) :- target(_, _, I), st. %% Va bene perche' per ora il target e' uno solo. Poi va trovato un modo per selezionarne uno (il piu vicino?)

inPath(X,Y) | outPath(X,Y) :- arc(X,Y), st.
:- inPath(X,Y), inPath(X,Y1), Y != Y1, st.
:- inPath(X,Y), inPath(X1,Y), X != X1, st. 
reachedT(X) :- startT(X), st.
reachedT(X) :- reachedT(Y), inPath(Y,X), st.
:- stopT(X), not reachedT(X), st.
:- stopT(X), inPath(X,Y), st.

giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 3, D1 = 2, M1=1, M2=3.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 3, D1 = 1, M1=2, M2=3.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 4, D1 = 2, M1=1, M2=4.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 4, D1 = 1, M1=2, M2=4.

giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 1, D1 = 3, M1=4, M2=1.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 1, D1 = 4, M1=3, M2=1.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 2, D1 = 3, M1=4, M2=2.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 2, D1 = 4, M1=3, M2=2.

% 180 Gradi - sopra,sotto
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 4, D1 = 3, M1=1, M2=2.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 3, D1 = 4, M1=1, M2=2.

% 180 Gradi - destra,sinistra
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 2, D1 = 1, M1=3, M2=4.
giroAttorno(M1,M2) :- player(_,_,NP), scatolaTrovata(D), direzioneDaPrendere(D1), D = 1, D1 = 2, M1=3, M2=4.

angolo :- giroAttorno(M1, M2).

%% Evitiamo i muri
:- reached(X), muro(X).

direzionePrecedente(X) :- read(griglia(griglia(direzione(X)))).

%% OTTIMIZZAZIONE %%
% Pago la lunghezza del cammino a lv 1
:~ #count{X,Y: inPath(X,Y)} = C. [C@2]
:- #count{X,Y: inPath(X,Y)} = C, C > 9.

% Numero di mosse 

:- penultimaDir(X), ultimaDir(Y), vado(X), X != Y.

% Tra cammini di uguale lunghezza preferisco quello che mi fa muovere verso sinistra e in alto
:~ inPath(A,B), startT(A), D = A-B, A > B. [D@1]
:~ inPath(A,B), startT(A), D = B-A, A < B. [D@1]
:~ inPath(A,B), startS(A), D = A-B, A > B. [D@1]
:~ inPath(A,B), startS(A), D = B-A, A < B. [D@1]

% NO NON HA SENSO !!! - Preferisco la direzione minore (e' solo un modo di discriminare)
% :~ direzioneDaPrendere(D). [D@4]
% Preferisco le strade diritte
% :~ angolo. [1@8]
% Pago sui cambi di direzione
% :~ direzioneDaPrendere(D), direzionePrecedente(DP), DP != D. [1@6] 
% Preferisco i cammini con scatole in mezzo
% :~ inPath(X, Y), celle(A, B, Y, C), C != 4. [1@3]
:- box(X,Y,ID), st, muro(X+1,Y,_), muro(X,Y-1,_).

% Non e' possibile che inPath ci siano cammini senza "spazio di manovra"
:- inPath(X, X+1), inPath(X+1, X-9), muro(_,_,X+2), muro(_,_,X+9).

%% Conto i cambi di direzione nel cammino
% cambiDirezione(A,C) :- inPath(A,B), inPath(B,C), C = A + 8.
% cambiDirezione(A,C) :- inPath(A,B), inPath(B,C), C = A - 8.
% cambiDirezione(A,C) :- inPath(A,B), inPath(B,C), C = A - 10.
% cambiDirezione(A,C) :- inPath(A,B), inPath(B,C), C = A + 10.
% numCambiDir(N) :- #count{A,C: cambiDirezione(A,C)} = N.
% :~ numCambiDir(N). [N@5]

%% OUTPUT (Direzione da prendere) %%
%    1   |    3
%  4 0 3 |  2 0 1
%    2   |    4

direzioneDaPrendere(D) :- player(_, _, PI), inPath(PI, SI), SI=PI+1, D=1, not st. %% Destra
direzioneDaPrendere(D) :- player(_, _, PI), inPath(PI, SI), SI=PI-1, D=2, not st. %% Sinistra
direzioneDaPrendere(D) :- player(_, _, PI), inPath(PI, SI), SI=PI-9, D=4, not st. %% Sopra
direzioneDaPrendere(D) :- player(_, _, PI), inPath(PI, SI), SI=PI+9, D=3, not st. %% Sotto

direzioneDaPrendere(D) :- box(_, _, PI), inPath(PI, SI), SI=PI+1, D=1, st. %% Destra
direzioneDaPrendere(D) :- box(_, _, PI), inPath(PI, SI), SI=PI-1, D=2, st. %% Sinistra
direzioneDaPrendere(D) :- box(_, _, PI), inPath(PI, SI), SI=PI-9, D=4, st. %% Sopra
direzioneDaPrendere(D) :- box(_, _, PI), inPath(PI, SI), SI=PI+9, D=3, st. %% Sotto

playerNextPos(X, Y) :- player(XP, YP, P), inPath(P, I), celle(X, Y, I, C).

playerNextId(I) :- player(XP, YP, P), direzioneDaPrendere(D), D = 1, I = P + 1.
playerNextId(I) :- player(XP, YP, P), direzioneDaPrendere(D), D = 2, I = P - 1.
playerNextId(I) :- player(XP, YP, P), direzioneDaPrendere(D), D = 3, I = P + 9.
playerNextId(I) :- player(XP, YP, P), direzioneDaPrendere(D), D = 4, I = P - 9.

setOnActuator(scrivo(gameManager(gameManager(x(X))))) :- giroAttorno(D,D2), direction(D,X,Y), angolo.
setOnActuator(scrivo(gameManager(gameManager(y(Y))))) :- giroAttorno(D,D2), direction(D,X,Y), angolo.
setOnActuator(scrivo(gameManager(gameManager(x2(X))))) :- giroAttorno(D1, D2), direction(D2,X,Y), angolo.
setOnActuator(scrivo(gameManager(gameManager(y2(Y))))) :- giroAttorno(D1, D2), direction(D2,X,Y), angolo.

setOnActuator(scrivo(gameManager(gameManager(x(X))))) :- direzioneDaPrendere(D), direction(D,X,Y), not angolo.
setOnActuator(scrivo(gameManager(gameManager(y(Y))))) :- direzioneDaPrendere(D), direction(D,X,Y), not angolo.
setOnActuator(scrivo(gameManager(gameManager(x2(X))))) :- X = -1, not angolo.
setOnActuator(scrivo(gameManager(gameManager(y2(Y))))) :- Y = -1, not angolo.
