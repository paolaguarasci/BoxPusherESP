%%  ' '   0   Spazio 
%%  ';'   1   Nuovo Livello
%%  '#'   2   Muro
%%  '_'   3   Muro v2
%%  '$'   4   Scatola
%%  '@'   5   Personaggio
%%  '.'   6   Target
%% 


% %    1   |    3
% %  4 0 3 |  2 0 1
% %    2   |    4

% direction(0,0,0).   %% fermo    -- Fermo
% direction(1,20,10). %% Sopra    -- Destra
% direction(2,0,10).  %% Sotto    -- Sinistra
% direction(3,10,20). %% Destra   -- Sopra
% direction(4,10,0).  %% Sinitra  -- Sotto

% celle(X, Y, I, C) :- readGriglia(griglia(griglia(mappa(I,cella(x(X)))))), readGriglia(griglia(griglia(mappa(I,cella(y(Y)))))), readGriglia(griglia(griglia(mappa(I,cella(val(C)))))).
% player(X, Y, I) :- readGriglia(griglia(griglia(mappa(I,cella(x(X)))))), readGriglia(griglia(griglia(mappa(I,cella(y(Y)))))), readGriglia(griglia(griglia(player(x(X))))), readGriglia(griglia(griglia(player(y(Y))))).
% target(X, Y, I) :- celle(X, Y, I, C), C = 3.
% box(X, Y, I)  :- celle(X, Y, I, C), C = 4.
% targetLiberi(X,Y, I) :- target(X,Y,I), not box(X,Y,I).
% stop(I) :- targetLiberi(_, _, I).

% mifermo :- player(_, _, PI), PI = I, stop(I).
% direzioneDaPrendere(0) :- mifermo.
% direzioneDaPrendere(D) :- readDir(random(randomDirection(direction(D)))), not mifermo.

% dir(1). % Sopra - in effetti va a destra
% dir(2). % Sotto - in effetti va a sinistra
% dir(3). % Destra - in effetti va sopra
% dir(4). % Sinistra - in effetti va sotto

% direzioneDaPrendere(D) :- dir(D), not mifermo.

% setOnActuator(scrivoDir(gameManager(gameManager(x(X))))) :- direzioneDaPrendere(D), direction(D,X,Y).
% setOnActuator(scrivoDir(gameManager(gameManager(y(Y))))) :- direzioneDaPrendere(D), direction(D,X,Y).

direction(0,0,0). %% fermo
direction(1,20,10). %% sopra
direction(2,0,10).  %% sotto
direction(3,10,20). %% destra
direction(4,10,0).  %% sinitra

%% MAPPA %%
celle(X, Y, I, C) :- readGriglia(griglia(griglia(mappa(I,cella(x(X)))))), readGriglia(griglia(griglia(mappa(I,cella(y(Y)))))), readGriglia(griglia(griglia(mappa(I,cella(val(C)))))).
nodo(I) :- readGriglia(griglia(griglia(mappa(I,cella(x(A)))))).
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2, X2 = X1 + 1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2, X2 = X1 - 1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2 + 1, X2 = X1, C1 != 2, C2 != 2.   
arc(I1, I2) :- nodo(I1), nodo(I2), celle(X1,Y1,I1,C1), celle(X2,Y2,I2,C2), I1 != I2, Y1 = Y2 - 1, X2 = X1, C1 != 2, C2 != 2.   
quantiArchi(X) :- #count{A,B: arc(A,B)} = X.
muro(X, Y, I) :- celle(X, Y, I, C), C = 2.
libero(X, Y, I) :- celle(X, Y, I, C), C = 0.

%% PLAYER %%
player(X, Y, I) :- readGriglia(griglia(griglia(mappa(I,cella(x(X)))))), readGriglia(griglia(griglia(mappa(I,cella(y(Y)))))), readGriglia(griglia(griglia(player(x(X))))), readGriglia(griglia(griglia(player(y(Y))))).

%% BOX %%
box(X, Y, I)  :- celle(X, Y, I, C), C = 4.

%% TARGET %%
target(X, Y, I) :- celle(X, Y, I, C), C = 6.

%% CAMMINO Fase 1 (cerco una scatola) %%
scatolaPiuVicina(IB, X) :- distanzeScatolePlayer(IB, X), #min{D: distanzeScatolePlayer(I, D)} = X. 
start(I) :- player(_, _, I).
stop(I) :- target(_, _, I).
distanzeScatolePlayer(IB, D) :- player(_, _, IP), box(_, _, IB), D = IP - IB, IP > IB.
distanzeScatolePlayer(IB, D) :- player(_, _, IP), box(_, _, IB), D = IB - IP, IB > IP.

inPath(X,Y) | outPath(X,Y) :- arc(X,Y).
:- inPath(X,Y), inPath(X,Y1), Y != Y1.
:- inPath(X,Y), inPath(X1,Y), X != X1. 
reached(X) :- start(X).
reached(X) :- reached(Y), inPath(Y,X).
:- stop(X), not reached(X).
:- stop(X), inPath(X,Y).

%% Evitiamo i muri
% :- reached(X), muro(X).

%% OTTIMIZZAZIONE %%
% Pago la lunghezza del cammino a lv 1
:~ #count{X,Y: inPath(X,Y)} = C. [C@1]
% Tra cammini di uguale lunghezza preferisco quello che mi fa muovere verso sinistra e in alto
% :~ inPath(A,B), start(A), D = A-B, A > B. [D@2]
% :~ inPath(A,B), start(A), D = B-A, A < B. [D@2]
% Preferisco i cammini con scatole in mezzo
% :~ inPath(X, Y), celle(A, B, Y, C), C != 4. [1@3]

%% OUTPUT (Direzione da prendere) %%
%    1   |    3
%  4 0 3 |  2 0 1
%    2   |    4

mifermo :- player(_, _, PI), PI = I, stop(I).
direzioneDaPrendere(0) :- mifermo.
direzioneDaPrendere(D) :- not miFermo, player(_, _, PI), inPath(PI, SI), not stop(SI), SI = PI - 9, D = 4. %% Sopra
direzioneDaPrendere(D) :- not miFermo, player(_, _, PI), inPath(PI, SI), not stop(SI), SI = PI + 9, D = 3. %% Sotto
direzioneDaPrendere(D) :- not miFermo, player(_, _, PI), inPath(PI, SI), not stop(SI), SI = PI - 1, D = 2. %% Sinistra
direzioneDaPrendere(D) :- not miFermo, player(_, _, PI), inPath(PI, SI), not stop(SI), SI = PI + 1, D = 1. %% Destra

playerNextPos(X, Y) :- player(XP, YP, P), inPath(P, I), celle(X, Y, I, C).

playerNextId(I) :- player(XP, YP, P), inPath(P, I).

setOnActuator(scrivoDir(gameManager(gameManager(x(X))))) :- direzioneDaPrendere(D), direction(D,X,Y).
setOnActuator(scrivoDir(gameManager(gameManager(y(Y))))) :- direzioneDaPrendere(D), direction(D,X,Y).
